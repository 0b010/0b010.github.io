[{"title":"Hello World","url":"/2021/06/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"mysql设计：多条记录支持用户自定义排序","url":"/2021/06/10/mysql-customize-sort/","content":"背景故事是这样的，我们的产品的某个场景里，有多个选项需要排列展示给用户，供用户选择。产品经理希望后台管理系统（CMS）能够支持人为地修改这些元素的排列顺序。类比一下，就类似于我们在电商平台买东西时，会有套餐一、套餐二等等很多套餐供我们选择，现在需要支持在后台随时修改这些套餐排列的先后顺序。\n前端方案方案有很多，不过因为一些原因，我们需要使用 table 来呈现数据，基于 table，大致列出三种操作方案：\n\n通过输入框直接填写每条记录的排序序号\n每条记录后面增加 up 和 down 两个按钮，通过点击按钮来操作当前记录向上或者向下移动一位\n直接拖动表格每行记录来调整顺序\n\n方案一实现最简单，用户使用体验较差；方案三实现相对复杂，但用户使用体验最好；方案二的实现复杂度和使用体验则介于两者之间。最终在 前端方案 上，我们还是选择了使用体验最好的方案三。\n数据库设计前端方案已定，接下来的重点则主要在的数据库的设计上。前端 table 里每行数据对应数据库表里的每条记录，如何控制这些记录的输出顺序，主要也有三种方案：\n\n数据表增加一列sort字段，专门存储每条记录的排序序号 1.1 每次拖动重置所有记录的排序字段   数据查询：数据库排序  \n 修改顺序：修改全部记录（小优化：仅修改拖动前后位置区间内的记录）  \n 添加记录：修改全部记录  \n 删除记录：仅删除本记录  \n\n 1.2 排序字段使用double类型，每次拖动后，仅修改被拖动记录的排序字段，其值为新位置前后两条记录排序值的和的二分之一   数据查询：数据库排序  \n 修改顺序：仅修改本记录的排序字段，但可修改次数受sort字段的数据精度影响  \n 添加记录：只需添加一条记录  \n 删除记录：仅删除本删除记录  \n\n\n数据表增加两列prev、next字段，分别存储本条记录前一个记录和后一个记录的id   数据查询：查全部数据，并自行排序  \n 修改顺序：修改原位置和现位置前后两条记录和当前记录  \n 添加记录：修改插入位置前后两条记录  \n 删除记录：修改被删除记录前后两条记录  \n\n\n增加一个数据表，将每条记录的id按排列顺序放在一个json数据数组中，并序列化成字符串存入该数据表   数据查询：查数据表和排序表，并自行排序  \n 修改顺序：修改排序表  \n 添加记录：修改数据表和排序表  \n 删除记录：修改数据表和排序表  \n\n以上几种设计和实现方案各有优缺点，最初我陷入了一个误区，总想“一步到位”，找到一个集一切优点于一身的完美方案（比如 实现简单、可利用数据库排序、支持无限次修改、支持大量数据、修改顺序时数据库改动小、单表操作等），然而，被现实狠狠地抽了一记耳光后，终于意识到，合适的才是最好的，最终选择了1.2的实现方案。\n\n方案选择why？为什么是1.2？仔细梳理业务后发现：  \n\n既然是支持用户手动拖动，那数据量必然不会大，否则人为哪能玩的过来，而我们目前还足10个，最多也就2位数的量  \n本身这个排列顺序就很少改动，只有极少数的特殊情况下才会改动，而double类型数据范围为 -2^1024-2^1024，数据精度为15-16位，至少能支持1000+次增改，满足我们的业务需求  \n\n所以，本着简单实现的原则，再结合实际场景，方案1.2自然是最佳选择。  \n心得抛开业务场景选方案都是耍流氓~~很多时候并没有想象中的完美方案，适合自己的才会最好的~~\n","categories":["数据库"],"tags":["mysql"]}]